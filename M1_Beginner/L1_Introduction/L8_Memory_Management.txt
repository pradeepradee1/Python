Python memory management has two main parts

1) Stack Memory: Used for local variables and function calls.
2) Heap Memory: Used for objects and data structures, such as lists, dictionaries, and custom objects

Memory Management:

Python handles memory management automatically using a combination of technique like 
1) Reference Counting, 
2) Garbage Collection 
3) Memory Pools



1) reference counting :

*) Every object has a associated reference count 
*) When an object's reference count drops to zero, Python will deallocating the object.

Ex : 

a = [1, 2, 3]  # Reference count of the list is 1
b = a          # Reference count increases to 2
del a          # Reference count decreases to 1
del b          # Reference count drops to 0, and the memory is deallocated


2. Garbage Collection (GC):
*) It helps to clean up memory that reference counting canâ€™t handle, like circular references 
*) Garbage Collection will break it and  remove unused object


Ex :

class Node:
    def __init__(self, value):
        self.value = value
        self.next = None

a = Node(1)
b = Node(2)
a.next = b
b.next = a  # Circular reference
del a
del b       # The garbage collector cleans this up


3) Memory pools :
*) Python uses private heap called the Python Object Allocator ( PyMalloc ) for small objects
*) It will reduce the overhead of memory from the OS frequently
